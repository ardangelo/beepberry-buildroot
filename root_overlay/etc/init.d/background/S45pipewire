#!/bin/sh

###
# This one's a bit odd. We want to run this as our non-root user,
# because if pipewire is run as root, we won't be able to connect
# to the (root-owned) socket. So we use start-stop-daemon to run
# the daemons as our non-root user and keep state in the user's
# home directory.

DAEMONS="pipewire pipewire-session"

USER=beepy

# TODO put these somewhere less gross (or figure out how to ensure 
# pipewire has them in its environment - /etc/default maybe?

export PIPEWIRE_RUNTIME_DIR=/home/$USER/.run
export DBUS_SESSION_BUS_ADDRESS=unix:path=/run/dbus/system_bus_socket



start() {
	for DAEMON in pipewire pipewire-media-session ; do
		printf 'Starting %s: ' "$DAEMON"
		
		[ -r "/etc/default/$DAEMON" ] && . "/etc/default/$DAEMON"

		PIDFILE="$PIPEWIRE_RUNTIME_DIR/$DAEMON.pid"
		export PIPEWIRE_LOG=/var/log/$DAEMON.log

		start-stop-daemon -S -q -m -b -c $USER -p "$PIDFILE" -x "/usr/bin/$DAEMON"

		status=$?
		if [ "$status" -eq 0 ]; then
			echo "OK"
		else
			echo "FAIL"
			return "$status"
		fi

		sleep 1

	done
	
	return "$status"
}

stop() {

	for DAEMON in pipewire-media-session pipewire ; do
		printf 'Stopping %s: ' "$DAEMON"
		
		[ -r "/etc/default/$DAEMON" ] && . "/etc/default/$DAEMON"

                PIDFILE="$PIPEWIRE_RUNTIME_DIR/$DAEMON.pid"

		start-stop-daemon -K -q -p "$PIDFILE"

	        status=$?
		if [ "$status" -eq 0 ]; then
                        echo "OK"
			rm -f $PIDFILE
                else
                        echo "FAIL"
                        return "$status"
                fi	

	done

	return "$status"
}

restart() {
	stop
	sleep 1
	start
}

case "$1" in
	start|stop|restart)
		"$1";;
	*)
		echo "Usage: $0 {start|stop|restart}"
		exit 1
esac
